#!groovy

def isPullRequest = env.CHANGE_ID ? true : false
//def BuildBadge = addEmbeddableBadgeConfiguration(id: "build", subject: "Build")
stages = [:]

def generateMsg(stages) {
  msg = "${env.BUILD_TAG}"
  for (stage in stages) {
    msg += "\n${stage.key}: ${stage.value}"
  }
  return msg
}

startTime = currentBuild.duration
slackResponse = slackSend(message: generateMsg(stages))
started = false

def notify(status, duration = 0, e = "") {
  if (status == 'start') {
    stages["${env.STAGE_NAME}"] = 'running ▶'
  }
  else if (status == 'failed') {
    stages["${env.STAGE_NAME}"] = "failed ❌ ${duration}s with ${e}"
  }
  else if (status == 'success') {
    stages["${env.STAGE_NAME}"] = "success ✅ ${duration}s"
  }
  else if (status == 'aborted') {
    stages["${env.STAGE_NAME}"] = "aborted ⏹"
  }
  else if (status == 'cleanup') {
    stages["${env.STAGE_NAME}"] = "cleanup ♻"
  }
  slackSend(channel: slackResponse.channelId, message: generateMsg(stages), timestamp: slackResponse.ts)
}


pipeline {

  agent none

  environment {
    AGENT_PORT=4242
    WAIT_TIMEOUT=2400
    WAIT_INTERVAL=10
    COMPOSE_HTTP_TIMEOUT=120
    DOCKER_REGISTRY='263182626354.dkr.ecr.us-east-1.amazonaws.com'
    AWS_ACCESS_KEY_ID='AKIAT2RXIFYZLDB66LZ3'
    AWS_SECRET_ACCESS_KEY='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'
    AWS_DEFAULT_REGION='us-east-1'
  }

  stages {

    stage('Build-prod') {
      agent {
        kubernetes {
          label 'slave'
          yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: slave
spec:
  nodeSelector:
    jenkins: slave
  containers:
  - name: jenkins-agent
    image: 263182626354.dkr.ecr.us-east-1.amazonaws.com/jenkins-agent
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    securityContext:
      privileged: true
    volumeMounts:
    - name: dockersock
      mountPath: "/var/run/docker.sock"
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
      type: File
"""
        }
      }

      when {
        buildingTag()
        beforeAgent true
      }

      environment {
        //VERSION=sh(returnStdout: true, script: "git tag --contains | head -1").trim()
        VERSION="${TAG_NAME}"
        DP_AGENT_PORT=4242
      }

      steps {
        container('jenkins-agent') {
          script {
            int startTime = currentBuild.duration
            notify('start')
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
              try {
                sh label: 'login to ecr', script: 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY'
                sh label: 'ecr create repo', script: '''for service in $(docker-compose -f docker-compose.yml ps --services | grep -wv -e mongo)
                    do
                      aws ecr describe-repositories --repository-names $service || aws ecr create-repository --repository-name $service
                    done
                    '''
                sh label: 'generate deployment', script: 'python3 kubernetes/kuber_generator.py'
                sh label: 'docker build', script: 'docker-compose -f docker-compose.yml -f staging.yml -f network.yml build'
                sh label: 'docker push', script: 'docker-compose -f docker-compose.yml -f staging.yml push'
              }
              catch (Exception e) {
                int duration = (currentBuild.duration - startTime) / 1000
                notify('failed', duration, e.getMessage())
                throw e
              }
            }
          }
        }
      }

      post {
        failure {
          script {
            int duration = (currentBuild.duration - startTime) / 1000
            notify('failed', duration)
          }
        }
        success {
          script {
            int duration = (currentBuild.duration - startTime) / 1000
            notify('success', duration)
          }
        }
      }
    }

    stage('Deploy-prod') {
      agent {
        kubernetes {
          label 'slave'
          yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: slave
spec:
  containers:
  - name: jenkins-agent
    image: 263182626354.dkr.ecr.us-east-1.amazonaws.com/jenkins-agent
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    securityContext:
      privileged: true
    volumeMounts:
    - name: dockersock
      mountPath: "/var/run/docker.sock"
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
      type: File
"""
        }
      }

      input {
        message 'Pick environment'
        parameters {
          choice(name: 'ENVIRONMENT', choices: ['A', 'B'], description: 'Pick environment')
        }
      }

      when {
        buildingTag()
        beforeAgent true
      }

      environment {
        VERSION="${TAG_NAME}"
        ENV_FILE=".env.prod." + ENVIRONMENT.toLowerCase()
      }

      steps {
        container('jenkins-agent') {
          script {
            int startTime = currentBuild.duration
            env.NAMESPACE = "alexa-" + ENVIRONMENT.toLowerCase()
            notify('start')
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
              try {
                sh label: 'update kubeconfig', script: 'aws eks update-kubeconfig --name alexa'
                sh label: 'update environment', script: "kubectl create configmap env -n ${NAMESPACE} --from-env-file $ENV_FILE -o yaml --dry-run=client | kubectl apply -f -"
                sh label: 'generate deployment', script: 'python3 kubernetes/kuber_generator.py'
                sh label: 'deploy', script: 'for dir in kubernetes/models/*; do kubectl apply -f $dir || true; done'
              }
              catch (Exception e) {
                int duration = (currentBuild.duration - startTime) / 1000
                notify('failed', duration, e.getMessage())
                throw e
              }
            }
          }
        }
      }

      post {
        failure {
          script {
            int duration = (currentBuild.duration - startTime) / 1000
            notify('failed', duration)
          }
        }
        success {
          script {
            int duration = (currentBuild.duration - startTime) / 1000
            notify('success', duration)
          }
        }
      } // end of post
    } // end of stage
  } // end of stages
}
