services:
  agent:
    command: sh -c 'bin/wait && python -m deeppavlov_agent.run -ch http_client --cors'
    build:
      context: ./
      dockerfile: dockerfile_agent
    environment:
      WAIT_HOSTS: "cobotqa:8081, cobot-topics:8000, cobot-dialogact:8002, cobot-convers-evaluator-annotator:8004,
        cobot-nounphrases:8006, program-y:8008, sentseg:8011, convers-evaluation-selector:8009, personality-catcher:8010,
        intent-responder:8012, intent-catcher:8014, blacklisted-words:8018,
        sentrewrite:8017, ner:8021, program-y-dangerous:8022, movie-skill:8023,
        convert-reddit:8029, personal-info-skill:8030, asr:8031, misheard-asr:8033, weather-skill:8037,
        eliza:8047, emotion-skill:8049, dummy-skill-dialog:8052, comet-atomic:8053, meta-script-skill:8054,
        coronavirus-skill:8061, small-talk-skill:8062, game-cooperative-skill:8068, program-y-wide:8064,
        comet-conceptnet:8065, news-api-skill:8066, short-story-skill:8057, greeting-skill:8070, factoid-qa:8071, kbqa:8072,
        factoid-classification:8073, spelling-preprocessing:8074, entity-linking:8075, wiki-parser:8077, text-qa:8078,
        knowledge-grounding:8083, combined-classification:8087, knowledge-grounding-skill:8085,
        dff-friendship-skill:8086, masked-lm:8088, entity-storer:8089, wikidata-dial-skill:8091, wikidata-dial-service:8092,
        book-skill:8032, grounding-skill:8080,
        dff-animals-skill:8094, dff-travel-skill:8096, dff-food-skill:8097, dff-sport-skill:8098,
        midas-classification:8090, dff-celebrity-skill:8093, fact-retrieval:8100, cobot-entities:8102"
      WAIT_HOSTS_TIMEOUT: ${WAIT_TIMEOUT:-480}
    deploy:
      mode: replicated
      replicas: 8
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  cobotqa:
    build:
      context: .
      dockerfile: ./skills/CoBotQA/Dockerfile
    environment:
      - ASYNC_SIZE=20
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8081 -t 15 --preload
    deploy:
      mode: replicated
      replicas: 8
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  cobot-topics:
    build:
      context: ./annotators/CoBotTopicClassification/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8000 -t 15 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  cobot-dialogact:
    build:
      context: ./annotators/CoBotDialogActClassification/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8002 -t 15 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  cobot-convers-evaluator-annotator:
    build:
      context: ./annotators/CoBotConversationEvaluator/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8004 -t 15 --preload
    deploy:
      mode: replicated
      replicas: 8
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  cobot-nounphrases:
    build:
      context: ./annotators/cobot_nounphrases/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8006 -t 60 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  program-y:
    build:
      context: .
      dockerfile: ./skills/program-y/Dockerfile
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  personality-catcher:
    build:
      context: ./skills/personality_catcher/
    command: uvicorn server:app --host 0.0.0.0 --port 8010
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 50M

  sentseg:
    build:
      context: ./annotators/SentSeg/
    command: flask run -h 0.0.0.0 -p 8011
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 1G

  convers-evaluation-selector:
    build:
      context: .
      dockerfile: ./response_selectors/convers_evaluation_based_selector/Dockerfile
    command: flask run -h 0.0.0.0 -p 8009
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 8
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  sentrewrite:
    build:
      context: ./annotators/SentRewrite/
    command: flask run -h 0.0.0.0 -p 8017
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 512M

  intent-responder:
    build:
      context: .
      dockerfile: ./skills/IntentResponder/Dockerfile
    command: gunicorn --workers=1 --name=responder --bind 0.0.0.0:8012 --timeout=100 server:app --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  intent-catcher:
    build:
      context: ./annotators/IntentCatcher/
    command:  python -m flask run -h 0.0.0.0 -p 8014 --without-threads
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 3.5G
        reservations:
          memory: 3.5G

  blacklisted-words:
    build:
      context: ./annotators/BlacklistedWordsDetector/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8018 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 100M

  program-y-dangerous:
    build:
      context: ./skills/program-y-dangerous/
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  movie-skill:
    build:
      context: .
      dockerfile: ./skills/movie_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8023 --timeout=300 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  ner:
    build:
      context: ./annotators/NER/
    environment:
      DEVICE: cuda
    command: flask run -h 0.0.0.0 -p 8021
    environment:
      - FLASK_APP=server
    tty: true
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 1512M
        reservations:
          memory: 1512M

  eliza:
    build:
      context: ./skills/eliza/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8047 --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 80M
        reservations:
          memory: 80M

  convert-reddit:
    build:
      context: ./skills/convert_reddit/
    command: flask run -h 0.0.0.0 -p 8029
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 1536M
        reservations:
          memory: 1536M

  personal-info-skill:
    build:
      context: .
      dockerfile: ./skills/personal_info_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8030 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  asr:
    build:
      context: .
      dockerfile: ./annotators/asr/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8031 --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 80M
        reservations:
          memory: 80M

  misheard-asr:
    build:
      context: ./skills/misheard_asr/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8033 --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  book-skill:
    build:
      context: .
      dockerfile: ./skills/book_skill/Dockerfile
      args:
        AUTHOR_NAMES: http://files.deeppavlov.ai/alexaprize_data/book_author_names.txt
        QUERY_DICT: http://files.deeppavlov.ai/alexaprize_data/book_query_dict.pkl
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8032 --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 540M
        reservations:
          memory: 540M

  weather-skill:
    build:
      context: .
      dockerfile: ./skills/weather_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8037 --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 1152M
        reservations:
          memory: 1152M

  emotion-skill:
    build:
      context: .
      dockerfile: ./skills/emotion_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8049 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 80M
        reservations:
          memory: 80M

  dummy-skill-dialog:
    build:
      context: ./skills/dummy_skill_dialog/
    command: flask run -h 0.0.0.0 -p 8052 --without-threads
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  comet-atomic:
    build:
      context: ./annotators/COMeT/
      args:
        GRAPH: atomic
        PRETRAINED_MODEL: http://lnsigo.mipt.ru/export/alexaprize_data/comet/atomic_pretrained_model.pickle
        PREPROCESS_DATA: "http://lnsigo.mipt.ru/export/alexaprize_data/comet/categories_oEffect%23oReact%23oWant%23xAttr%23xEffect%23xIntent%23xNeed%23xReact%23xWant-maxe1_17-maxe2_35-maxr_1.pickle"
        TEST_SCRIPT: test_atomic.py
        DECODING_ALGO: beam-3
    command: flask run -h 0.0.0.0 -p 8053
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - DEVICE=gpu_0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 3.5G
        reservations:
          memory: 3.5G

  comet-conceptnet:
    build:
      context: ./annotators/COMeT/
      args:
        GRAPH: conceptnet
        PRETRAINED_MODEL: http://lnsigo.mipt.ru/export/alexaprize_data/conceptnet/conceptnet_pretrained_model.pickle
        PREPROCESS_DATA: http://lnsigo.mipt.ru/export/alexaprize_data/conceptnet/rel_language-trainsize_100-devversion_12-maxe1_10-maxe2_15-maxr_5.pickle
        DECODING_ALGO: beam-3
        TEST_SCRIPT: test_conceptnet.py
    command: flask run -h 0.0.0.0 -p 8065
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - DEVICE=gpu_0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 3.5G
        reservations:
          memory: 3.5G

  meta-script-skill:
    build:
      context: .
      dockerfile: skills/meta_script_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8054 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  short-story-skill:
    build:
      context: .
      dockerfile: ./skills/short_story_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8057 --preload
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 80M
        reservations:
          memory: 80M

  coronavirus-skill:
    build:
      context: .
      dockerfile: ./skills/coronavirus_skill/Dockerfile
    command: flask run -h 0.0.0.0 -p 8061
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  small-talk-skill:
    build:
      context: .
      dockerfile: ./skills/small_talk_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8062 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 80M
        reservations:
          memory: 80M

  game-cooperative-skill:
    build:
      args:
        SERVICE_PORT: 8068
      context: .
      dockerfile: ./skills/game_cooperative_skill/Dockerfile
    command: bash server_run.sh "gunicorn --workers=1 server:app -b 0.0.0.0:8068 --reload --preload"
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  program-y-wide:
    build:
      context: ./skills/program-y-wide/
    command: sh -c "./sanic.sh"
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  news-api-skill:
    build:
      context: .
      dockerfile: ./skills/news_api_skill/Dockerfile
    environment:
      - ASYNC_SIZE=3
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8066 -t 15 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  greeting-skill:
    build:
      context: .
      dockerfile: ./skills/greeting_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8070 --timeout=60 --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 50M

  factoid-qa:
    build:
      context: .
      dockerfile: ./skills/factoid_qa/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8071 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  entity-linking:
    build:
      args:
        CONFIG: kbqa_entity_linking.json
        PORT: 8075
        SRC_DIR: annotators/entity_linking
        COMMIT: 5b99ac3392e8e178e2bb4f9b218d4ddb2ec2e242
      context: ./
      dockerfile: dp/dockerfile_skill_gpu
    environment:
      - CUDA_VISIBLE_DEVICES=''
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 23G
        reservations:
          memory: 23G

  wiki-parser:
    build:
      args:
        CONFIG: wiki_parser.json
        PORT: 8077
        SRC_DIR: annotators/wiki_parser
        COMMIT: ff5b156d16a949c3ec99da7fb60ae907dec37a41
      context: ./
      dockerfile: annotators/wiki_parser/Dockerfile
    command: flask run -h 0.0.0.0 -p 8077
    environment:
      - CUDA_VISIBLE_DEVICES=''
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 10
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  text-qa:
    build:
      args:
        CONFIG: qa.json
        PORT: 8078
        COMMIT: 4b3e60c407644b750c9dc292ac6bf206081fb9d0
      context: services/text_qa
      dockerfile: Dockerfile
    command: flask run -h 0.0.0.0 -p 8078
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 3G

  kbqa:
    build:
      args:
        CONFIG: kbqa_cq_mt_bert_lite.json
        PORT: 8072
        SRC_DIR: annotators/kbqa/
        COMMIT: 5b99ac3392e8e178e2bb4f9b218d4ddb2ec2e242
      context: ./
      dockerfile: annotators/kbqa/Dockerfile
    command: flask run -h 0.0.0.0 -p 8072
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 5G
        reservations:
          memory: 5G

  factoid-classification:
    build:
      args:
        CONFIG: factoid_classification.json
        PORT: 8073
        SRC_DIR: annotators/DeepPavlovFactoidClassification
      context: ./
      dockerfile: dp/dockerfile_skill_gpu
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 3G

  spelling-preprocessing:
    build:
      context: ./annotators/spelling_preprocessing/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8074 --timeout=100 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 50M

  grounding-skill:
    build:
      context: .
      dockerfile: ./skills/grounding_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8080 --timeout=60 --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 80M
        reservations:
          memory: 80M

  knowledge-grounding:
    build:
      args:
        MODEL_CKPT: 3_sent_62_epochs
      context: ./services/knowledge_grounding/
    command: flask run -h 0.0.0.0 -p 8083
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 4G

  dff-friendship-skill:
    build:
      args:
        SERVICE_PORT: 8086
        SERVICE_NAME: dff_friendship_skill # has to be the same with skill dir name
      context: .
      dockerfile: ./skills/dff_friendship_skill/Dockerfile
    command:  gunicorn --workers=1 server:app -b 0.0.0.0:8086 --reload --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  masked-lm:
    build:
      context: ./services/masked_lm/
      args:
        SERVICE_PORT: 8088
        PRETRAINED_MODEL_NAME_OR_PATH: "bert-base-uncased"
    command: flask run -h 0.0.0.0 -p 8088
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 2.5G
        reservations:
          memory: 2.5G

  entity-storer:
    build:
      context: .
      dockerfile: annotators/entity_storer/Dockerfile
      args:
        WORK_DIR: annotators/entity_storer
        SERVICE_PORT: 8089
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8089 --reload --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 384M

  knowledge-grounding-skill:
    build:
      context: .
      dockerfile: ./skills/knowledge_grounding_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8085 --preload
    environment:
      - CUDA_VISIBLE_DEVICES=''
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M

  dff-celebrity-skill:
    build:
      args:
        SERVICE_PORT: 8093
        SERVICE_NAME: dff_celebrity_skill
      context: .
      dockerfile: ./skills/dff_celebrity_skill/Dockerfile
    command:  gunicorn --workers=1 server:app -b 0.0.0.0:8093 --reload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  combined-classification:
    build:
      args:
        CONFIG: combined_classifier.json
        PORT: 8087
      context: .
      dockerfile: ./annotators/combined_classification/Dockerfile
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G

  wikidata-dial-skill:
    build:
      args:
        PORT: 8091
      context: skills/wikidata_dial_skill
    command: flask run -h 0.0.0.0 -p 8091
    environment:
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M

  wikidata-dial-service:
    build:
      args:
        CONFIG: kg_dial_generator.json
        PORT: 8092
        COMMIT: 5dac85a06fde0e2983c7569ae058e3bf2d45ce2c
      context: services/wikidata_dial_service
    command: flask run -h 0.0.0.0 -p 8092
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 10G
        reservations:
          memory: 10G

  dff-animals-skill:
    build:
      args:
        SERVICE_PORT: 8094
        SERVICE_NAME: dff_animals_skill # has to be the same with skill dir name
      context: .
      dockerfile: ./skills/dff_animals_skill/Dockerfile
    command: gunicorn --workers=1 --timeout 100 server:app -b 0.0.0.0:8094 --reload --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  dff-travel-skill:
      build:
        args:
          SERVICE_PORT: 8096
          SERVICE_NAME: dff_travel_skill # has to be the same with skill dir name
        context: .
        dockerfile: skills/dff_travel_skill/Dockerfile
      command:  gunicorn --workers=1 server:app -b 0.0.0.0:8096 --reload --preload
      deploy:
        mode: replicated
        replicas: 2
        resources:
          limits:
            memory: 768M
          reservations:
            memory: 768M

  dff-sport-skill:
    build:
      args:
        SERVICE_PORT: 8098
        SERVICE_NAME: dff_sport_skill
      context: .
      dockerfile: skills/dff_sport_skill/Dockerfile
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8098 --reload --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  dff-food-skill:
    build:
      args:
        SERVICE_PORT: 8097
        SERVICE_NAME: dff_food_skill
      context: .
      dockerfile: ./skills/dff_food_skill/Dockerfile
    command: gunicorn --workers=1 --timeout 500 --graceful-timeout 500 server:app -b 0.0.0.0:8097 --reload --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  dff-music-skill:
    build:
      args:
        SERVICE_PORT: 8099
        SERVICE_NAME: dff_music_skill # has to be the same with skill dir name
      context: .
      dockerfile: ./skills/dff_music_skill/Dockerfile
    command:  gunicorn --workers=1 server:app -b 0.0.0.0:8099 --reload --preload
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 768M

  midas-classification:
    build:
      context: ./annotators/midas_classification
    command: flask run -h 0.0.0.0 -p 8090
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 11G
        reservations:
          memory: 11G

  fact-retrieval:
    build:
      args:
        CONFIG: fact_retrieval.json
        PORT: 8100
        SRC_DIR: annotators/fact_retrieval/
        COMMIT: 4b3e60c407644b750c9dc292ac6bf206081fb9d0
      context: ./
      dockerfile: annotators/fact_retrieval/Dockerfile
    command: flask run -h 0.0.0.0 -p 8100
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - FLASK_APP=server
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 4G

  cobot-entities:
    build:
      context: ./annotators/CoBotNER/
    command: gunicorn --workers=1 server:app -b 0.0.0.0:8102 -t 15 --preload
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 128M
version: '3.7'
